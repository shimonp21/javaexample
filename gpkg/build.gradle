/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.12.1/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

group = 'io.github.shimonp21'
version = '1.0'

java {
    withJavadocJar()
    withSourcesJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    gradlePluginPortal()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api libs.commons.math3

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation libs.guava
    implementation 'org.slf4j:slf4j-api:2.0.0'
    implementation 'org.slf4j:slf4j-simple:2.0.0'
}

tasks.named('test', Test) {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

publishing {
    repositories {
        maven {
            name = "central"
            url = 'https://central.sonatype.com/api/v1/publisher/upload'
            
            credentials {
                username = 'GZLpOoFD'
                password = 'gf6Fi4JjtPEpo9XCTQdRss7k7qw3wq7nzD3j7JKaR4/w'
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            artifactId = 'mynamespace'
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'shimonmynamespace'
                description = 'My description of my library'
                url = 'github.com/shimonp21/gp'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'shimonp21'
                        name = 'Shimon Pats'
                        email = 'shimonp21@gmail.com'
                    }
                }
                scm {
                    url = 'https://github.com/botscripter/awesome-project'
                    connection = 'scm:git://github.com:botscripter/awesome-project.git'
                    developerConnection = 'scm:git://github.com:botscripter/awesome-project.git'
                }
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}